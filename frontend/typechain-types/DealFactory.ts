/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ParticipantAddressesStruct = {
  dealdex: string;
  manager: string;
  project: string;
};

export type ParticipantAddressesStructOutput = [string, string, string] & {
  dealdex: string;
  manager: string;
  project: string;
};

export type ExchangeRateStruct = {
  numerator: BigNumberish;
  denominator: BigNumberish;
};

export type ExchangeRateStructOutput = [BigNumber, BigNumber] & {
  numerator: BigNumber;
  denominator: BigNumber;
};

export type InvestmentSizeConstraintsStruct = {
  minInvestmentPerInvestor: BigNumberish;
  maxInvestmentPerInvestor: BigNumberish;
  minTotalInvestment: BigNumberish;
  maxTotalInvestment: BigNumberish;
};

export type InvestmentSizeConstraintsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  minInvestmentPerInvestor: BigNumber;
  maxInvestmentPerInvestor: BigNumber;
  minTotalInvestment: BigNumber;
  maxTotalInvestment: BigNumber;
};

export type InvestConfigStruct = {
  sizeConstraints: InvestmentSizeConstraintsStruct;
  lockConstraint: BigNumberish;
  investmentTokenAddress: string;
  gateToken: string;
  investmentKeyType: BigNumberish;
  investmentDeadline: BigNumberish;
};

export type InvestConfigStructOutput = [
  InvestmentSizeConstraintsStructOutput,
  number,
  string,
  string,
  number,
  BigNumber
] & {
  sizeConstraints: InvestmentSizeConstraintsStructOutput;
  lockConstraint: number;
  investmentTokenAddress: string;
  gateToken: string;
  investmentKeyType: number;
  investmentDeadline: BigNumber;
};

export type ClaimRefundConfigStruct = {
  allowRefunds: boolean;
  lockConstraint: BigNumberish;
};

export type ClaimRefundConfigStructOutput = [boolean, number] & {
  allowRefunds: boolean;
  lockConstraint: number;
};

export type ClaimTokensConfigStruct = {
  projectTokenAddress: string;
  dealdexFeeBps: BigNumberish;
  managerFeeBps: BigNumberish;
  lockConstraint: BigNumberish;
};

export type ClaimTokensConfigStructOutput = [string, number, number, number] & {
  projectTokenAddress: string;
  dealdexFeeBps: number;
  managerFeeBps: number;
  lockConstraint: number;
};

export type ClaimFundsConfigStruct = {
  dealdexFeeBps: BigNumberish;
  managerFeeBps: BigNumberish;
  lockConstraint: BigNumberish;
};

export type ClaimFundsConfigStructOutput = [number, number, number] & {
  dealdexFeeBps: number;
  managerFeeBps: number;
  lockConstraint: number;
};

export type VestingScheduleStruct = {
  vestingStrategy: BigNumberish;
  vestingBps: BigNumberish[];
  vestingTimestamps: BigNumberish[];
};

export type VestingScheduleStructOutput = [number, number[], BigNumber[]] & {
  vestingStrategy: number;
  vestingBps: number[];
  vestingTimestamps: BigNumber[];
};

export type DealConfigStruct = {
  participantAddresses: ParticipantAddressesStruct;
  exchangeRate: ExchangeRateStruct;
  investConfig: InvestConfigStruct;
  refundConfig: ClaimRefundConfigStruct;
  tokensConfig: ClaimTokensConfigStruct;
  fundsConfig: ClaimFundsConfigStruct;
  vestingSchedule: VestingScheduleStruct;
};

export type DealConfigStructOutput = [
  ParticipantAddressesStructOutput,
  ExchangeRateStructOutput,
  InvestConfigStructOutput,
  ClaimRefundConfigStructOutput,
  ClaimTokensConfigStructOutput,
  ClaimFundsConfigStructOutput,
  VestingScheduleStructOutput
] & {
  participantAddresses: ParticipantAddressesStructOutput;
  exchangeRate: ExchangeRateStructOutput;
  investConfig: InvestConfigStructOutput;
  refundConfig: ClaimRefundConfigStructOutput;
  tokensConfig: ClaimTokensConfigStructOutput;
  fundsConfig: ClaimFundsConfigStructOutput;
  vestingSchedule: VestingScheduleStructOutput;
};

export interface DealFactoryInterface extends utils.Interface {
  contractName: "DealFactory";
  functions: {
    "createDeal(((address,address,address),(uint256,uint256),((uint256,uint256,uint256,uint256),uint8,address,address,uint8,uint256),(bool,uint8),(address,uint16,uint16,uint8),(uint16,uint16,uint8),(uint8,uint16[],uint256[])))": FunctionFragment;
    "dealContractAddress()": FunctionFragment;
    "dealdexAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createDeal",
    values: [DealConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dealContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dealdexAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "createDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dealContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealdexAddress",
    data: BytesLike
  ): Result;

  events: {
    "DealCreated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DealCreated"): EventFragment;
}

export type DealCreatedEvent = TypedEvent<
  [string, string, string],
  { creator: string; project: string; dealAddress: string }
>;

export type DealCreatedEventFilter = TypedEventFilter<DealCreatedEvent>;

export interface DealFactory extends BaseContract {
  contractName: "DealFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DealFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createDeal(
      _dealConfig: DealConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dealContractAddress(overrides?: CallOverrides): Promise<[string]>;

    dealdexAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  createDeal(
    _dealConfig: DealConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dealContractAddress(overrides?: CallOverrides): Promise<string>;

  dealdexAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createDeal(
      _dealConfig: DealConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    dealContractAddress(overrides?: CallOverrides): Promise<string>;

    dealdexAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DealCreated(address,address,address)"(
      creator?: string | null,
      project?: string | null,
      dealAddress?: null
    ): DealCreatedEventFilter;
    DealCreated(
      creator?: string | null,
      project?: string | null,
      dealAddress?: null
    ): DealCreatedEventFilter;
  };

  estimateGas: {
    createDeal(
      _dealConfig: DealConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dealContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    dealdexAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createDeal(
      _dealConfig: DealConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dealContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dealdexAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
